"""
 - ``Author``:  MST_CDA
 - ``Date``:  2024-04-14
 - ``Version``:  1.0
 - ``file``: main.py
 
This proyect implements an digital signal generator.

In this practice, we will develop a Digital Signal Generator (DSG) device. 
The DSG device generates 4 different waveforms: sine, triangular, sawtooth, and square. 
The user can select the type of waveform generated by the DSG using a push button. 
Each time the button is pressed, the system switches from one waveform to the next sequentially. 
The amplitude, DC level (offset), and signal frequency are entered using a 4x4 matrix keypad. 
To enter the amplitude, the user will press the A key followed by the desired voltage value in 
millivolts and the D key to finalize. Similarly, to enter the DC level, the user will press 
the B key followed by the desired DC voltage value in millivolts and the D key to finalize. 
Finally, to enter the frequency, the user must press the C key followed by the frequency 
value in Hertz and the D key to finalize. The current values of Amplitude, DC Level, and 
Frequency along with the current waveform will be printed every second via the serial or USB 
interface to a terminal tool. 

The Amplitude should be adjustable between 100mV and 2500mV, the DC Level between 50mV and 1250mV. 
The frequency should be adjustable between 1 Hz and 12000000 Hz. 
Therefore, the max range for the value of the signal is: -2450mV to 3750mV.

By default, the DSG device starts generating a sinusoidal signal with an amplitude of 1000 mV, 
DC Level of 500mV, and frequency of 10Hz. The generated signal and its characteristics 
should be able to be verified by a measuring instrument, multimeter, or oscilloscope.

   The DSG device should be implemented using the following hardware components:
   - RPPS (Raspberry Pi Pico System) board.
   - 4x4 matrix keypad.
   - Digital-to-Analog Converter (DAC0808).
   - Operational Amplifier (LM358).
   - LED

NOTE: Using Pin.value(), it must take into accout that: 
    - If is given a parameter and it is Pin.OUT: it sets the pin to what is given.
    - If no parameter is given and it is Pin.IN: it returns the current value of the pin.
    To other cases, its behavior is not defined.

"""

from machine import Pin, Timer
from time_base import Time_base
from gpio_button import Button
from keypad_polling import KeyPad
from signal_generator import Signal
from dac import DAC
from gpio_led import Led

led = Pin("LED", Pin.OUT)
tim = Timer()
tb_base = Time_base(1000000, True)
def tick(timer):
    global led
    led.toggle()

tim.init(freq=3, mode=Timer.PERIODIC, callback=tick)